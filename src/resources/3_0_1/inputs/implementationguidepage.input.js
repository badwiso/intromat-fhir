const {
	GraphQLString,
	GraphQLList,
	GraphQLNonNull,
	GraphQLInputObjectType,
} = require('graphql');
const UriScalar = require('../scalars/uri.scalar.js');
const CodeScalar = require('../scalars/code.scalar.js');

/**
 * @name exports
 * @summary ImplementationGuidepage Input Schema
 */
module.exports = new GraphQLInputObjectType({
	name: 'ImplementationGuidepage_Input',
	description: '',
	fields: () => ({
		_id: {
			type: require('./element.input.js'),
			description:
				'unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
		},
		id: {
			type: GraphQLString,
			description:
				'unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
		},
		extension: {
			type: new GraphQLList(require('./extension.input.js')),
			description:
				'May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
		},
		modifierExtension: {
			type: new GraphQLList(require('./extension.input.js')),
			description:
				'May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.',
		},
		_source: {
			type: require('./element.input.js'),
			description: 'The source address for the page.',
		},
		source: {
			type: new GraphQLNonNull(UriScalar),
			description: 'The source address for the page.',
		},
		_title: {
			type: require('./element.input.js'),
			description:
				'A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.',
		},
		title: {
			type: new GraphQLNonNull(GraphQLString),
			description:
				'A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.',
		},
		_kind: {
			type: require('./element.input.js'),
			description:
				'The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/guide-page-kind
		kind: {
			type: new GraphQLNonNull(CodeScalar),
			description:
				'The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.',
		},
		_type: {
			type: require('./element.input.js'),
			description:
				'For constructed pages, what kind of resources to include in the list.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/resource-types
		type: {
			type: new GraphQLList(CodeScalar),
			description:
				'For constructed pages, what kind of resources to include in the list.',
		},
		_package: {
			type: require('./element.input.js'),
			description:
				'For constructed pages, a list of packages to include in the page (or else empty for everything).',
		},
		package: {
			type: new GraphQLList(GraphQLString),
			description:
				'For constructed pages, a list of packages to include in the page (or else empty for everything).',
		},
		_format: {
			type: require('./element.input.js'),
			description: 'The format of the page.',
		},
		format: {
			type: CodeScalar,
			description: 'The format of the page.',
		},
	}),
});
