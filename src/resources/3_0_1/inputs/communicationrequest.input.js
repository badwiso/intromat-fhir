const {
	GraphQLNonNull,
	GraphQLEnumType,
	GraphQLList,
	GraphQLString,
	GraphQLInputObjectType,
} = require('graphql');
const IdScalar = require('../scalars/id.scalar.js');
const UriScalar = require('../scalars/uri.scalar.js');
const CodeScalar = require('../scalars/code.scalar.js');
const DateTimeScalar = require('../scalars/datetime.scalar.js');

/**
 * @name exports
 * @summary CommunicationRequest Input Schema
 */
module.exports = new GraphQLInputObjectType({
	name: 'CommunicationRequest_Input',
	description: 'Base StructureDefinition for CommunicationRequest Resource',
	fields: () => ({
		resourceType: {
			type: new GraphQLNonNull(
				new GraphQLEnumType({
					name: 'CommunicationRequest_Enum_input',
					values: { CommunicationRequest: { value: 'CommunicationRequest' } },
				}),
			),
			description: 'Type of resource',
		},
		_id: {
			type: require('./element.input.js'),
			description:
				'The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.',
		},
		id: {
			type: IdScalar,
			description:
				'The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.',
		},
		meta: {
			type: require('./meta.input.js'),
			description:
				'The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.',
		},
		_implicitRules: {
			type: require('./element.input.js'),
			description:
				'A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.',
		},
		implicitRules: {
			type: UriScalar,
			description:
				'A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.',
		},
		_language: {
			type: require('./element.input.js'),
			description: 'The base language in which the resource is written.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/languages
		language: {
			type: CodeScalar,
			description: 'The base language in which the resource is written.',
		},
		text: {
			type: require('./narrative.input.js'),
			description:
				"A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
		},
		contained: {
			type: new GraphQLList(GraphQLString),
			description:
				'These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.',
		},
		extension: {
			type: new GraphQLList(require('./extension.input.js')),
			description:
				'May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
		},
		modifierExtension: {
			type: new GraphQLList(require('./extension.input.js')),
			description:
				'May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.',
		},
		identifier: {
			type: new GraphQLList(require('./identifier.input.js')),
			description:
				'A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.',
		},
		basedOn: {
			type: new GraphQLList(GraphQLString),
			description:
				'A plan or proposal that is fulfilled in whole or in part by this request.',
		},
		replaces: {
			type: new GraphQLList(GraphQLString),
			description:
				'Completed or terminated request(s) whose function is taken by this new request.',
		},
		groupIdentifier: {
			type: require('./identifier.input.js'),
			description:
				'A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.',
		},
		_status: {
			type: require('./element.input.js'),
			description: 'The status of the proposal or order.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/request-status
		status: {
			type: new GraphQLNonNull(CodeScalar),
			description: 'The status of the proposal or order.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/communication-category
		category: {
			type: new GraphQLList(require('./codeableconcept.input.js')),
			description:
				'The type of message to be sent such as alert, notification, reminder, instruction, etc.',
		},
		_priority: {
			type: require('./element.input.js'),
			description:
				'Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/request-priority
		priority: {
			type: CodeScalar,
			description:
				'Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/v3-ParticipationMode
		medium: {
			type: new GraphQLList(require('./codeableconcept.input.js')),
			description:
				'A channel that was used for this communication (e.g. email, fax).',
		},
		subject: {
			type: GraphQLString,
			description:
				'The patient or group that is the focus of this communication request.',
		},
		recipient: {
			type: new GraphQLList(GraphQLString),
			description:
				'The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.',
		},
		topic: {
			type: new GraphQLList(GraphQLString),
			description:
				'The resources which were related to producing this communication request.',
		},
		context: {
			type: GraphQLString,
			description:
				'The encounter or episode of care within which the communication request was created.',
		},
		payload: {
			type: new GraphQLList(require('./communicationrequestpayload.input.js')),
			description:
				'Text, attachment(s), or resource(s) to be communicated to the recipient.',
		},
		_occurrenceDateTime: {
			type: require('./element.input.js'),
			description: 'The time when this communication is to occur.',
		},
		occurrenceDateTime: {
			type: DateTimeScalar,
			description: 'The time when this communication is to occur.',
		},
		occurrencePeriod: {
			type: require('./period.input.js'),
			description: 'The time when this communication is to occur.',
		},
		_authoredOn: {
			type: require('./element.input.js'),
			description:
				'For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.',
		},
		authoredOn: {
			type: DateTimeScalar,
			description:
				'For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.',
		},
		sender: {
			type: GraphQLString,
			description:
				'The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.',
		},
		requester: {
			type: require('./communicationrequestrequester.input.js'),
			description:
				'The individual who initiated the request and has responsibility for its activation.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/v3-ActReason
		reasonCode: {
			type: new GraphQLList(require('./codeableconcept.input.js')),
			description:
				'Describes why the request is being made in coded or textual form.',
		},
		reasonReference: {
			type: new GraphQLList(GraphQLString),
			description:
				'Indicates another resource whose existence justifies this request.',
		},
		note: {
			type: new GraphQLList(require('./annotation.input.js')),
			description:
				'Comments made about the request by the requester, sender, recipient, subject or other participants.',
		},
	}),
});
