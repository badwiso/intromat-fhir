const {
	GraphQLNonNull,
	GraphQLEnumType,
	GraphQLList,
	GraphQLUnionType,
	GraphQLObjectType,
} = require('graphql');
const IdScalar = require('../scalars/id.scalar.js');
const UriScalar = require('../scalars/uri.scalar.js');
const CodeScalar = require('../scalars/code.scalar.js');
const DateTimeScalar = require('../scalars/datetime.scalar.js');

/**
 * @name exports
 * @summary CommunicationRequest Schema
 */
module.exports = new GraphQLObjectType({
	name: 'CommunicationRequest',
	description: 'Base StructureDefinition for CommunicationRequest Resource',
	fields: () => ({
		resourceType: {
			type: new GraphQLNonNull(
				new GraphQLEnumType({
					name: 'CommunicationRequest_Enum_schema',
					values: { CommunicationRequest: { value: 'CommunicationRequest' } },
				}),
			),
			description: 'Type of resource',
		},
		_id: {
			type: require('./element.schema.js'),
			description:
				'The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.',
		},
		id: {
			type: IdScalar,
			description:
				'The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.',
		},
		meta: {
			type: require('./meta.schema.js'),
			description:
				'The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.',
		},
		_implicitRules: {
			type: require('./element.schema.js'),
			description:
				'A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.',
		},
		implicitRules: {
			type: UriScalar,
			description:
				'A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.',
		},
		_language: {
			type: require('./element.schema.js'),
			description: 'The base language in which the resource is written.',
		},
		language: {
			type: CodeScalar,
			description: 'The base language in which the resource is written.',
		},
		text: {
			type: require('./narrative.schema.js'),
			description:
				"A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
		},
		contained: {
			type: new GraphQLList(require('./resourcelist.schema')),
			description:
				'These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.',
		},
		extension: {
			type: new GraphQLList(require('./extension.schema.js')),
			description:
				'May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
		},
		modifierExtension: {
			type: new GraphQLList(require('./extension.schema.js')),
			description:
				'May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.',
		},
		identifier: {
			type: new GraphQLList(require('./identifier.schema.js')),
			description:
				'A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.',
		},
		category: {
			type: require('./codeableconcept.schema.js'),
			description:
				'The type of message to be sent such as alert, notification, reminder, instruction, etc.',
		},
		sender: {
			type: new GraphQLUnionType({
				name: 'CommunicationRequestsender_sender_Union',
				description:
					'The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.',
				types: () => [
					require('./device.schema.js'),
					require('./organization.schema.js'),
					require('./patient.schema.js'),
					require('./practitioner.schema.js'),
					require('./relatedperson.schema.js'),
				],
				resolveType(data) {
					if (data && data.resourceType === 'Device') {
						return require('./device.schema.js');
					}
					if (data && data.resourceType === 'Organization') {
						return require('./organization.schema.js');
					}
					if (data && data.resourceType === 'Patient') {
						return require('./patient.schema.js');
					}
					if (data && data.resourceType === 'Practitioner') {
						return require('./practitioner.schema.js');
					}
					if (data && data.resourceType === 'RelatedPerson') {
						return require('./relatedperson.schema.js');
					}
				},
			}),
			description:
				'The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.',
		},
		recipient: {
			type: new GraphQLList(
				new GraphQLUnionType({
					name: 'CommunicationRequestrecipient_recipient_Union',
					description:
						'The entity (e.g. person, organization, clinical information system, or device) which is the intended target of the communication.',
					types: () => [
						require('./device.schema.js'),
						require('./organization.schema.js'),
						require('./patient.schema.js'),
						require('./practitioner.schema.js'),
						require('./relatedperson.schema.js'),
					],
					resolveType(data) {
						if (data && data.resourceType === 'Device') {
							return require('./device.schema.js');
						}
						if (data && data.resourceType === 'Organization') {
							return require('./organization.schema.js');
						}
						if (data && data.resourceType === 'Patient') {
							return require('./patient.schema.js');
						}
						if (data && data.resourceType === 'Practitioner') {
							return require('./practitioner.schema.js');
						}
						if (data && data.resourceType === 'RelatedPerson') {
							return require('./relatedperson.schema.js');
						}
					},
				}),
			),
			description:
				'The entity (e.g. person, organization, clinical information system, or device) which is the intended target of the communication.',
		},
		payload: {
			type: new GraphQLList(require('./communicationrequestpayload.schema.js')),
			description:
				'Text, attachment(s), or resource(s) to be communicated to the recipient.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/v3-ParticipationMode
		medium: {
			type: new GraphQLList(require('./codeableconcept.schema.js')),
			description:
				'A channel that was used for this communication (e.g. email, fax).',
		},
		requester: {
			type: new GraphQLUnionType({
				name: 'CommunicationRequestrequester_requester_Union',
				description:
					'The responsible person who authorizes this order, e.g. physician. This may be different than the author of the order statement, e.g. clerk, who may have entered the statement into the order entry application.',
				types: () => [
					require('./practitioner.schema.js'),
					require('./patient.schema.js'),
					require('./relatedperson.schema.js'),
				],
				resolveType(data) {
					if (data && data.resourceType === 'Practitioner') {
						return require('./practitioner.schema.js');
					}
					if (data && data.resourceType === 'Patient') {
						return require('./patient.schema.js');
					}
					if (data && data.resourceType === 'RelatedPerson') {
						return require('./relatedperson.schema.js');
					}
				},
			}),
			description:
				'The responsible person who authorizes this order, e.g. physician. This may be different than the author of the order statement, e.g. clerk, who may have entered the statement into the order entry application.',
		},
		_status: {
			type: require('./element.schema.js'),
			description: 'The status of the proposal or order.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/communication-request-status
		status: {
			type: CodeScalar,
			description: 'The status of the proposal or order.',
		},
		encounter: {
			type: new GraphQLUnionType({
				name: 'CommunicationRequestencounter_encounter_Union',
				description:
					'The encounter within which the communication request was created.',
				types: () => [require('./encounter.schema.js')],
				resolveType(data) {
					if (data && data.resourceType === 'Encounter') {
						return require('./encounter.schema.js');
					}
				},
			}),
			description:
				'The encounter within which the communication request was created.',
		},
		_scheduledDateTime: {
			type: require('./element.schema.js'),
			description: 'The time when this communication is to occur.',
		},
		scheduledDateTime: {
			type: DateTimeScalar,
			description: 'The time when this communication is to occur.',
		},
		scheduledPeriod: {
			type: require('./period.schema.js'),
			description: 'The time when this communication is to occur.',
		},
		reason: {
			type: new GraphQLList(require('./codeableconcept.schema.js')),
			description: 'The reason or justification for the communication request.',
		},
		_requestedOn: {
			type: require('./element.schema.js'),
			description: 'The time when the request was made.',
		},
		requestedOn: {
			type: DateTimeScalar,
			description: 'The time when the request was made.',
		},
		subject: {
			type: new GraphQLUnionType({
				name: 'CommunicationRequestsubject_subject_Union',
				description:
					'The patient who is the focus of this communication request.',
				types: () => [require('./patient.schema.js')],
				resolveType(data) {
					if (data && data.resourceType === 'Patient') {
						return require('./patient.schema.js');
					}
				},
			}),
			description:
				'The patient who is the focus of this communication request.',
		},
		// valueSetReference: http://hl7.org/fhir/ValueSet/diagnostic-order-priority
		priority: {
			type: require('./codeableconcept.schema.js'),
			description:
				'Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.',
		},
	}),
});
